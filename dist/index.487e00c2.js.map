{"mappings":"AAAA,KAAK,CAAC,GAAG,aAAe,CAAC;IACrB,KAAK,CAAC,GAAG,GAAG,CAAmD;IAC/D,KAAK,CAAC,OAAO,aAAe,CAAC;QACzB,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG;QAC5B,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI;IAC1B,CAAC;IACD,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,OAAO;IAC9B,OAAO,CAAC,GAAG,CAAC,QAAQ;IACpB,GAAG,EAAC,GAAG,CAAC,IAAI,IAAI,QAAQ,CAAE,CAAC;QACvB,GAAG,CAAC,GAAG,GAAG,QAAQ,CAAC,aAAa,CAAC,CAAM;QACvC,GAAG,CAAC,KAAK,GAAG,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI;QACjD,KAAK,CAAC,aAAa,CAAC,CAAI,KAAE,WAAW,GAAG,IAAI,CAAC,IAAI;QACjD,KAAK,CAAC,aAAa,CAAC,CAAG,IAAE,WAAW,GAAG,IAAI,CAAC,gBAAgB;QAC5D,KAAK,CAAC,aAAa,CAAC,CAAK,MAAE,GAAG,IAAI,kBAAkB,EAAE,IAAI,CAAC,KAAK;QAChE,QAAQ,CAAC,aAAa,CAAC,CAAgB,iBAAE,WAAW,CAAC,KAAK;IAC9D,CAAC;IACD,KAAK,CAAC,UAAU,IAAI,IAAI,EAAE,gBAAgB,EAAE,WAAW,EAAE,KAAK,EAAE,MAAM,GAAK,CAAC;QACxE,KAAK,CAAC,OAAO,GAAG,CAAC;YACb,MAAM,EAAE,MAAM;YACd,OAAO,EAAE,CAAC;gBACN,CAAc,eAAE,CAAkB;YACtC,CAAC;YACD,IAAI,EAAE,CAAC;gBACH,IAAI,EAAE,IAAI;gBACV,gBAAgB,EAAE,gBAAgB;gBAClC,WAAW,EAAE,WAAW;gBACxB,KAAK,EAAE,KAAK;YAChB,CAAC;QACL,CAAC;QACD,KAAK,CAAC,GAAG,EAAE,OAAO;IACtB,CAAC;aACQ,UAAU,CAAC,GAAG,EAAE,CAAC;QACtB,EAAgB,AAAhB,cAAgB;QAChB,KAAK,CAAC,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,CAAQ;QAC9C,KAAK,CAAC,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,CAAI;QAClC,EAAuB,AAAvB,qBAAuB;QACvB,MAAM,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK;QACxB,MAAM,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM;QAC1B,EAAiB,AAAjB,eAAiB;QACjB,GAAG,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;QACvB,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAY;IACxC,CAAC;AACL,CAAC;AACD,GAAG","sources":["src/script/main.js"],"sourcesContent":["const app = async () => {\n    const src = \"https://character-database.becode.xyz/characters/\";\n    const getData = async () => {\n        const data = await fetch(src);\n        return await data.json();\n    }\n    const database = await getData();\n    console.log(database);\n    for(let item of database) {\n        let tpl = document.querySelector('#tpl');\n        let clone = document.importNode(tpl.content, true);\n        clone.querySelector('h2').textContent = item.name;\n        clone.querySelector('p').textContent = item.shortDescription;\n        clone.querySelector('img').src = `data:image;base64,${item.image}`;\n        document.querySelector('#cardContainer').appendChild(clone);\n    }\n    const manageChar = (name, shortDescription, description, image, method) => {\n        const options = {\n            method: method,\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: {\n                name: name,\n                shortDescription: shortDescription,\n                description: description,\n                image: image\n            }\n        }\n        fetch(src, options);\n    }\n    function getDataUrl(img) {\n        // Create canvas\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n        // Set width and height\n        canvas.width = img.width;\n        canvas.height = img.height;\n        // Draw the image\n        ctx.drawImage(img, 0, 0);\n        return canvas.toDataURL('image/jpeg');\n    }\n}    \napp();"],"names":[],"version":3,"file":"index.487e00c2.js.map","sourceRoot":"/__parcel_source_root/"}